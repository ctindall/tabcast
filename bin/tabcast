#!/usr/bin/ruby
require 'rss'
require 'open-uri'
require 'optparse'
require 'liquid'
require 'cgi'
require 'digest/md5'
require 'digest/sha1'
require 'tabcast'

options = {}

optparse = OptionParser.new do|opts|
	#set default
	options[:format] = '{{utime}}\t{{title | spaces_to_underscores}}\t{{enclosure_url}}\n'
	options[:prefix] = ""
	options[:suffix] = ""

	opts.banner = "Usage: tabcast [-f FORMATSTRING] [-p PREFIX] [-s SUFFIX] file1 file2 ...\n(FORMATSTRING is assumed to be '#{options[:format]}' unless specified)
	
FORMATSTRING is a Liquid template (http://liquidmarkup.org/) that will be rendered once for each feed item.
			
The following variables are available to the template:
{{ utime }}           			-> The pubDate time of the feed item as a Unix timestamp.
{{ title }}           			-> The title of the feed item with new lines removed.
{{ enclosure_url}}     			-> The full URL of the feed item's
{{ author }}, {{ itunes_author }}	-> Just what it says on the tin.
{{ guid }}				-> The item's guid (from the feed XML), if it exists, otherwise \"nil\".
			
The following filters are available to the template:
`whitespace_to_underscores` does exactly what it sounds like.
`md5` `and sha1` likewise.
`urlencode` is pretty self-explanatory too.
	
In addition, the following sequences are escaped to the equivalent literal characters:" +
'
`\t`     -> literal tab
`\n`     -> literal newline

'

	opts.on( '-f', '--format FORMATSTRING', 'Output lines with FORMATSTRING' ) do |format|
		options[:format] = format
	end

	opts.on( '-d', '--delimiter DELIMITER', 'Use some other than tabs as the field delimiter' ) do |delimiter|
		options[:format] = "{{utime}}#{delimiter}{{title | spaces_to_underscores}}#{delimiter}{{enclosure_url}}" + '\n';
	end

	opts.on( '-p', '--prefix PREFIX', 'Print this string once, before the list of items') do |prefix|
		options[:prefix] = prefix
	end
	
	opts.on( '-s', '--suffix SUFFIX', 'Print this string once, after the list of items') do |suffix|
		options[:suffix] = suffix
	end

	opts.on( '-k', '--killfile KILLFILE', 'Path to a file containing killed enclosure URLs.') do |killfile|
		options[:killfile] = killfile
	end

	opts.on( '-g', '--guidkillfile GUIDKILLFILE', 'Path to a file containing killed guids.') do |guidkillfile|
		options[:guidkillfile] = guidkillfile
	end
	
	opts.on( '-h', '--help', 'Show usage.' ) do
		puts opts
		exit
	end


end

optparse.parse!

ARGV.each do |url|
	feed = Tabcast::TabCastFeed.new(url, options[:format])
	feed.prefix = options[:prefix]
	feed.suffix = options[:suffix]
	feed.killfile = options[:killfile] if options[:killfile]
	feed.guidkillfile = options[:guidkillfile] if options[:guidkillfile]
	print feed.formatted
	#print feed.feed.channel.methods
end
