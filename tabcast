#!/usr/bin/ruby
require 'rss'
require 'open-uri'
require 'optparse'
require 'liquid'

module TextFilter
	def spaces_to_underscores(input)
		input.gsub(/\s/, '_')
	end
end
Liquid::Template.register_filter(TextFilter)

class TabCastFeed
attr_reader :url, :feed, :template


	def initialize(url, format)
		@url = url
		@items = RSS::Parser.parse(url).items
		@template = Liquid::Template.parse(unescape(format))
	end

	def formatted
		string = ""
		@items.each do |i|
			string += @template.render( 	'utime' => i.pubDate.strftime('%s'),
					       		'title' => i.title.chomp,
							'enclosure_url' => i.enclosure.url 	)
		end
		string
	end

	private

	def unescape(string)
		string.gsub!('\t', "\t")
		string.gsub!('\n', "\n")
		string
	end
end

options = {}

optparse = OptionParser.new do|opts|
	#set default
	options[:format] = '{{utime}}\t{{title | spaces_to_underscores}}\t{{enclosure_url}}\n'

	opts.banner = "Usage: tabcast [-f FORMATSTRING] file1 file2 ...\n(FORMATSTRING is assumed to be '#{options[:format]}' unless specified)
	
FORMATSTRING is a Liquid template (http://liquidmarkup.org/) that will be rendered once for each feed item.
			
The following variables are available to the template:
{{ utime }}            -> The pubDate time of the feed item as a Unix timestamp.
{{ title }}            -> The title of the feed item with new lines removed.
{{ enclosure_url}}     -> The full URL of the feed item's
			
The following filters are available to the template:
`whitespace_to_underscores` does exactly what it sounds like.
	
In addition, the following sequences are escaped to the equivalent literal characters:" +
'
`\t`     -> literal tab
`\n`     -> literal newline

'

	opts.on( '-f', '--format FORMATSTRING', 'Output lines with FORMATSTRING' ) do |format|
		options[:format] = format
	end

	opts.on( '-h', '--help', 'Show usage.' ) do
		puts opts
		exit
	end
end

optparse.parse!

ARGV.each do |url|
	feed = TabCastFeed.new(url, options[:format])
	puts feed.formatted
end
